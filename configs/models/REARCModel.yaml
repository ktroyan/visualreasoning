model:
  backbone: 'vit'  # choices: 'vit', 'transformer', 'resnet'
  head: 'transformer'  # choices: 'transformer', 'mlp'
  pretrained: null
  patch_size: 1
  use_ohe_repr: true # if True, use OHE for the possible tokens thus yielding as many artificial channels as there are different possible tokens; if False, use a simple sequence of tokens with an artificial channel only created to use convolution for linear projection of patches/pixels/tokens
  ape:
    enabled: true
    ape_type: '2dsincos'  # choices: 'learn', '2dsincos'; absolute positional encoding
  rpe:
    enabled: true
    rpe_type: 'rope'  # choices: 'rope'; relative positional encoding
  use_cls_token: false # whether to use a cls token or not
  num_reg_tokens: 0
  encoder_aggregation:
    enabled: false
    method: '' # choices: '' (for no pooling and returning a sequence), 'mean', 'max', 'token' (for aggregating features and returning the cls token)
  n_tasks: 400    # used for the task embedding (i.e., to inform the model through an embedding of which tasks to consider)
  task_embedding:
    enabled: true
    task_embedding_dim: ${resolve_if_then_else:${model.task_embedding.enabled},128}
  training_hparams:
    optimizer: 'AdamW' # choices: Adam, AdamW, SGD
    scheduler: 'CosineAnnealingLR' # choices: ReduceLROnPlateau, StepLR, CosineAnnealingLR
    lr_warmup:
      enabled: true
      num_steps: 100.0
    lr: 0.001
    wd: 0.001
  observe_preds:
    enabled: True
    n_samples: 4
